import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

interface Calculator {
    int add(int a, int b);
}

class CalculatorImpl implements Calculator {
    public int add(int a, int b) {
        return a + b;
    }
}

public class ProxyPatternExample {
    public static void main(String[] args) {
        Calculator calculator = new CalculatorImpl();

        Calculator proxyCalculator = (Calculator) Proxy.newProxyInstance(
                Calculator.class.getClassLoader(),
                new Class[]{Calculator.class},
                new InvocationHandler() {
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        System.out.println("Before invoking method: " + method.getName());
                        Object result = method.invoke(calculator, args);
                        System.out.println("After invoking method: " + method.getName());
                        return result;
                    }
                });

        int sum = proxyCalculator.add(5, 7);
        System.out.println("Sum: " + sum);
    }
}
